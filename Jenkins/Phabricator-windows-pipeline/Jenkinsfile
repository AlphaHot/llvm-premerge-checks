// Copyright 2019 Google LLC
//
// Licensed under the the Apache License v2.0 with LLVM Exceptions (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://llvm.org/LICENSE.txt
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

def success = true

pipeline {
    agent { label 'windows' }
    parameters {
        string(name: 'DIFF_ID')
        string(name: 'PHID')
    }
    environment {
        CONDUIT_TOKEN = credentials('phabricator-conduit-token')
        PHABRICATOR_HOST = 'https://reviews.llvm.org'
        PHAB_LOG = "${WORKSPACE}/build/.phabricator-comment"
        MY_BUILD_ID = "${JOB_BASE_NAME}-${BUILD_NUMBER}"
        TARGET_DIR = "/mnt/nfs/results/${MY_BUILD_ID}"
        RESULT_URL = "http://results.llvm-merge-guard.org/${MY_BUILD_ID}"
        DIFF_JSON = "${WORKSPACE}/build/diff.json"
        SCRIPT_DIR = "${WORKSPACE}/llvm-premerge-checks/scripts"
        RESULT_DIR = "${WORKSPACE}\\results"
        LLVM_DIR = "${WORKSPACE}\\llvm-project"
    }
    stages {
        stage("build info"){
            steps {
                echo "Building diff ${DIFF_ID} with PHID ${PHID}"
            }
        }
        stage("git checkout"){
            steps {
                echo "getting llvm-premerge-checks... "
                dir("llvm-premerge-checks")
                {
                    git url: 'https://github.com/google/llvm-premerge-checks.git'
                }
                echo "getting llvm-project... "
                dir("llvm-project")
                {
                    bat ""
                    bat 'if exist "build" rd /s/q "build"'
                    git url: 'https://github.com/llvm/llvm-project.git'
                }
                powershell "New-Item -ItemType Directory -Force -Path ${RESULT_DIR}"
            }            
        }
        stage('arc patch'){
            steps {
                dir("${LLVM_DIR}"){
                    bat """
                        python ${SCRIPT_DIR}/phabtalk/apply_patch2.py --comment-file ${PHAB_LOG}  --token ${CONDUIT_TOKEN} --url ${PHABRICATOR_HOST} ${DIFF_ID}
                        """
                }
            }
        }
        stage('CMake') {
            steps {
                dir("${LLVM_DIR}"){
                    powershell "${SCRIPT_DIR}/run_cmake.ps1"
                }
            }
        }
        stage('ninja all') {
            steps {
                dir("${LLVM_DIR}"){
                    powershell "${SCRIPT_DIR}/run_ninja.ps1 all"
                }
            }
        }
        stage('ninja check-all') {
            steps {
                dir("${LLVM_DIR}"){
                    powershell "${SCRIPT_DIR}/run_ninja.ps1 check-all"
                }
            }
        }
    }
    post { 
        always { 
            echo "Logs uploaded to https://pantheon.corp.google.com/storage/browser/llvm-premerge-checks/results/${MY_BUILD_ID}."
            dir("${env.RESULT_DIR}") {
                // gather all result files in a folder, then upload everything to
                // Google Cloud Storage
                powershell """
                    Write-Host "Getting the console log..."
                    Invoke-WebRequest -OutFile console-log.txt -uri "http://jenkins.local:8080/job/${JOB_BASE_NAME}/${BUILD_NUMBER}/consoleText" -ErrorAction "Continue"
                    
                    Write-Host "Copying build artefacts..."
                    Copy-Item "${LLVM_DIR}\\build\\CMakeCache.txt" -ErrorAction SilentlyContinue
                    Copy-Item "${LLVM_DIR}\\build\\test-results.xml" -ErrorAction SilentlyContinue
                    
                    Write-Host "Uploading results to GCS..."
                    \$ErrorActionPreference = 'SilentlyContinue'
                    gsutil cp -Z *.* gs://llvm-premerge-checks/results/${MY_BUILD_ID}/
                    Write-Host "Done."
                """
            }
            // doesn't find junit results, not sure why...
            // junit "${LLVM_DIR}\\build\\test-results.xml"
        }
    } 

}